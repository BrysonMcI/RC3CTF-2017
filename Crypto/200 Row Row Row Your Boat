Crypto 200

Written by Sean Newman

RC3 CTF 2017

Overview

In this file, "user" refers to anyone attempting to solve this challenge.

This challenge involves cracking a stream cipher. The user will be given three components:

Entire ciphertext
Partial plaintext
Ciphertext assoicated with #2
With these components, the user will be able to decrypt the entire ciphertext. The flag will be contained within the plaintext in such a way that the entire ciphertext must be decrypted in order to obtain this flag. Examples include:

First letter of each word is the flag
First letter of each line is the flag
The flag's letters are captitalized
However the flag is stored within the plaintext, the plaintext itself will contain instructions for finding the flag.

Solving

First, the user has to determine the bit stream from the given plaintext/ciphertext pair. This is accomplished by XORing the binary representations of the two values. The resulting bit stream will contain an unknown number of repetitions of the key.

An optional step that will speed up the process is to determine the length of the key before proceeding. By analyzing the patterns in the derived bit stream, the user may be able to determine the length of the pattern. This step is not performed in the given solution, and it is not guaranteed to work.

Next, the user must determine both the offset (where the key starts in the derived bit stream) and the length of the key (if not already determined). This can be done by iterating through all the possible lengths (starting at the lowest is suggested) and all the possible offsets for each key length. Doing so can take very long, so a little knowledge of LFSRs can assist in making this process faster.

A simple LFSR has a "degree", which is an integer greater than 0. The "period" of the LFSR is the length of the key generated by the LFSR, which is equal to 2^x - 1, where x is the degree of the LFSR. Therefore, instead of trying every length between 1 and the length of the bit stream, we simply have to try the lengths associated with each degree, starting from 1. As long as the period associated with the degree is less than the bit stream, it is a possibility. This massively reduces the time spent searching for possible keys.

At each iteration of offset/degree pair, the ciphertext must start being decrypted. If the entire ciphertext can be decrypted into typical ASCII characters, then that offset/degree pair is a possibility that should be saved for later testing. If at any point, the decryption produces an unexpected character, the user can move on to the next offset/degree pair in the iteration.

Once all possible offset/degree pairs have been found, each pair should be used to decrypt the ciphertext. Each output should be saved to a separate file so the user can determine which output is correct. In some cases there may be multiple pairs that produce a valid output, however in the challenge's current configuration that should not occur.
